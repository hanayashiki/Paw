#!/bin/sh
# Check if package.json version has changed
# If so, update CHANGELOG.md with the commit message

set -e

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

export AWS_PROFILE=wcy

# Only run for regular commits (not merges, rebases, etc.)
if [ "$COMMIT_SOURCE" = "" ] || [ "$COMMIT_SOURCE" = "message" ]; then
  # Check if package.json is staged for commit
  if git diff --cached --name-only | grep -q "package.json"; then
    # Get the current version from package.json
    CURRENT_VERSION=$(node -p "require('./package.json').version")
    
    # Get the version from the last commit
    PREVIOUS_VERSION=$(git show HEAD:package.json 2>/dev/null | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
    
    # If versions are different, update changelog
    if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
      echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
      
      # Get the commit message
      COMMIT_MSG=$(cat "$COMMIT_MSG_FILE" | head -n 1)
      
      # Prepend the new version entry to CHANGELOG.md
      echo "## $CURRENT_VERSION\n$COMMIT_MSG" > temp_changelog.md
      cat CHANGELOG.md >> temp_changelog.md
      mv temp_changelog.md CHANGELOG.md
      
      # Stage the updated changelog
      git add CHANGELOG.md
      
      echo "Updated CHANGELOG.md with version $CURRENT_VERSION"
      
      # Replace the index.html download link
      WEBSITE_FILE="website/index.html"
      if [ -f "$WEBSITE_FILE" ]; then
        # Update the version number in the website file
        sed -i '' -E "s/Version [0-9]+\.[0-9]+\.[0-9]+/Version ${CURRENT_VERSION}/g" "$WEBSITE_FILE"
        # Update the download link to point to the new version
        sed -i '' -E "s/paw-[0-9]+\.[0-9]+\.[0-9]+\.dmg/paw-${CURRENT_VERSION}.dmg/g" "$WEBSITE_FILE"
        git add "$WEBSITE_FILE"
        echo "Updated download link in ${WEBSITE_FILE} to version ${CURRENT_VERSION}"
      fi
      
      git update-index --again
    fi
  fi
fi
